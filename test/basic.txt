## Set the directive prefix to '##'. Alternatively you
## can use the `-p` command-line option to set the prefix.
##
## The prefix directive is unique in that the literal string
## 'FCHK PREFIX' (actually with a hyphen between FCHK and PREFIX
## as seen below, but ## we can’t write it like that here, since
## it would be parsed as a directive if we did that) is always
## recognised as a directive, irrespective of what comes before
## it in the same line. This is required to bootstrap the prefix.
##
## FCHK-PREFIX ##

## Run this command on this file before checking it. You can also
## use the '-D' command-line option to specify additional definitions
## that can be used in 'R' directives. For example, setting
## '-D cat=/usr/bin/cat' allows you to write `%cat` to refer to that
## path in a 'R' directive (but not in other contexts).
##
## '%s' *always* designates the current file.
##
## R sed /^#/d %s

## This text is ignored because it does not resemble a
## valid directive, even though it starts with the directive
## prefix '##'.

## * Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet

## Check should ignore spaces.
## * Lorem    ipsum    dolor sit amet
Lorem ipsum     dolor sit    amet

## Check consecutive lines
## * A
## + B
## + C
A
B
C

## Check using a regular expression
## re* [0-9]+
## re+ [a-z]+
1234567890
asdfghjkl

## Check that a line does *not* contain a pattern.
##
## This attaches to preceding (re)* and (re)+ directives and
## checks the same line that those directives matched.
##
## * foo
## ! foobar
## re! [0-9]+
foo bar

## If you want to check that the next line, or any line starting
## at the current line, does not match, use `!+` and `!*` (or their
## regex equivalents `re!+` and `re!*`).
##
## Note that these directives advance the line pointer, whereas `!`
## does not, which is why the example below passes: since the line
## after 'orange' does not contain 'kumquat', but 'tomato', that
## line is skipped. After that, the line pointer is at 'kumquat',
## and no line in the file after that contains 'tom[a]to'.
##
## Try swapping the lines 'kumquat' and 'tomato' to see both fail.
##
## * orange
## !+ kumquat
## re!* tom[a]to
orange
tomato
kumquat

## Named capture groups can be used in subsequent directives.
##
## Since it doesn’t make sense to have anything after a `$` in
## a regular expression anyway, the syntax $name can be used as
## an alternative to \k<name> if the name matches the regular
## expression `[a-zA-Z0-9_]+`.
##
## * Q
## re+ %(?<foo>[0-9]+) = call
## re+ %[0-9]+ = add %\k<foo>, %\k<foo>
## re+ %[0-9]+ = add %$foo, %$foo
Q
%123 = call @bar()
%456 = add %123, %123
%789 = add %123, %123

## The `d` directive can be used to define a variable / capture
## group manually w/o having to match a pattern first.
##
## d tmp %[0-9]+
## * R
## re+ $tmp = add $tmp, $tmp
R
%1 = add %2, %3

## Variable substitution behaves differently depending on whether
## the variable is used by the same pattern that defines it or not,
## and on whether the variable was captured in a pattern or defined
## using `d`.
##
## For example, if the variable is used in the same regex that defines
## it, such as `foo` in `(?<foo>\d+) $foo`, the string `$foo` is rewritten
## to `\k<foo>` before the pattern is handed to the regex engine.
##
## However, when `$foo` (or `\k<foo>`) is used in a pattern after that,
## the regex engine can’t possibly know about it, so fchk will substitute
## the value that was bound to it in the pattern that defined it; e.g. if
## the value ended up being `123`, then `$foo` is replaced with `123`.
##
## As a result of this, in this latter case, if a variable’s value
## resembles a regular expression, then there are two things that can
## happen:
##
##     1. The variable is matched literally.
##     2. The variable is spliced into the pattern and treated as a RE.
##
## Case 1 applies to variables that are captured in an expression,
## whereas case 2 applies to variables that are defined using `d`.
##
## To instead force a variable to be inserted literally, use two `$$`
## instead of one `$`.
##
## d bar \d+
## * S
## re+ $$bar $bar $$bar
S
\d+ 12345 \d+

## Attempting to redefine an already existing variable, whether
## explicitly using `d` or implicitly by naming it in a pattern,
## is an error. Use the `u` directive to undefine a variable.
##
## u tmp
## * T
## re+ (?<tmp>\d+) \+ $tmp
T
42 + 42

## If you have been using a lot of variables and want to reuse
## them, you can write `u *` to undefine *all* variables.
##
## u *
## * foobarbaz
## re+ (?<tmp>\d+) - (?<foo>\d+) = $foo - $tmp
foobarbaz
42 - 43 = 43 - 42

## Tried of writing `re` everywhere if you’re using a lot of
## matches that involve regular expressions? You can use a pragma
## or `p` directive to make `*`, `+`, `!` equivalent to `re*`, `re+`,
## `re!` for the rest of the file.
##
## p re
## * \d+
## + (?<a>A+)B$a
1234
AAAAABAAAAA

## A pragma can be turned off by writing 'p <pragma> off'
##
## p re off
## * X
## + \d\d\d
X
\d\d\d

## Sometimes, you end up having to match text that just so happens to
## contain characters that have special meaning in regular expressions.
## If you don’t need those characters, you can disable them with the
## `p lit` pragma.
##
## This pragma takes a parameter, which is a string of characters that
## should be treated as literal characters. To stop treating characters
## as literal, use the `p nolit` pragma, which takes the same parameter.
##
## Unlike other pragmas, these two never take an `off` parameter.
##
## p lit .^
## re* foo.bar
## re+ baz^^.^^
## p nolit ^
## re+ ^foo
foo.bar
baz^^.^^
foo

## When a variable is defined using `d`, at substitution time, the literal
## character set will be that at definition time; for example, if you make
## `+` literal, then define a variable, then make `+` non-literal, and
## then finally use the variable, the `+`’s will still be matched
## literally.
##
## p lit +
## d plus +
## p nolit +
## * Z
## re+ $plus$plus
Z
++

## Programs tend to contain an awful lot of parentheses, and typically
## you probably won’t really need capture groups as commonly as regular
## parentheses, so the `p nocap` pragma can be used to disable capture
## groups.
##
## Since named capture groups are still useful though, anything that
## starts with `(?`, that is named and anonymous captures, as well as
## lookahead and lookbehind, still work as expected.
##
## p nocap
## * Y
## re+ () (?:(test)) ))((
Y
() (test) ))((